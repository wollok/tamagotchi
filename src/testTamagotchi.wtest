import tamagotchi.*

describe "tests del tamagotchi" {

	var tamagotchiComun
	var tamagotchiHambriento
	var tamagotchiTriste
	var perro
	var gato
	var perezoso
	
	fixture {
		tamagotchiComun = new Tamagotchi()
		tamagotchiHambriento = new Tamagotchi()
		tamagotchiHambriento.ponerseHambriento()
		tamagotchiTriste = new Tamagotchi()
		tamagotchiTriste.ponerseTriste()
		perro = new Perro()
		gato = new Gato()
		perezoso = new Perezoso()
	}
		
	test "comer estando contento" {
		assert.equals(0, tamagotchiComun.felicidad())
		tamagotchiComun.comer()
		assert.equals(1, tamagotchiComun.felicidad())
	}
	
	test "comer estando hambriento" {
		tamagotchiHambriento.comer()
		assert.that(tamagotchiHambriento.estaContento())
	}
	
	test "comer estando triste hace poco" {
		assert.throwsExceptionWithMessage("No es correcto que coma si est√° triste hace poco", { tamagotchiTriste.comer() })
	}
	
	test "comer estando triste hace mucho" {
		var triste = tamagotchiTriste.estado()
		triste.cuandoSePusoTriste(new Date(1, 1, 2016))
		tamagotchiTriste.comer()
		assert.that(tamagotchiTriste.estaContento())
	}

	test "jugar solo contento primera vez" {
		tamagotchiComun.jugarSolo()
		assert.equals(2, tamagotchiComun.felicidad())
	}
	
	test "jugar solo/con alguien contento 3 veces" {
		tamagotchiComun.jugarSolo()
		tamagotchiComun.jugarSolo()
		tamagotchiComun.jugarSolo()
		assert.equals(6, tamagotchiComun.felicidad())
		assert.that(tamagotchiComun.estaHambriento())
	}
		
		
	test "jugar solo triste" {
		tamagotchiTriste.jugarSolo()
		assert.that(tamagotchiTriste.estaContento())
	}

	test "jugar solo hambriento" {
		tamagotchiHambriento.jugarSolo()
		assert.equals(-4, tamagotchiHambriento.felicidad())
	}
	
	test "jugar con alguien triste" {
		tamagotchiTriste.jugarCon(tamagotchiHambriento)
		assert.that(tamagotchiTriste.estaContento())
		assert.that(tamagotchiHambriento.estaContento())
	}
	
	test "jugar con alguien contento" {
		tamagotchiComun.jugarCon(tamagotchiTriste)
		assert.that(tamagotchiTriste.estaContento())
		assert.equals(4, tamagotchiComun.felicidad())
	}

	test "perro come" {
		perro.comer()
		assert.equals(6, perro.felicidad())
	}

	test "gato no quiere jugar con otro" {
		gato.jugarCon(perro)
		assert.that(gato.estaTriste())
	}	
		
	test "perezoso juega y queda cansado" {
		perezoso.jugarSolo()
		assert.that(perezoso.estaCansado())
	}
	
	test "perezoso juega y queda cansado, no puede volver a jugar" {
		perezoso.jugarSolo()
		assert.throwsExceptionWithMessage("No puedo jugar solo si estoy cansado", { perezoso.jugarSolo() })
	}

	test "perezoso juega y queda cansado, come y baja felicidad" {
		perezoso.jugarSolo()
		perezoso.comer()
		assert.equals(-3, perezoso.felicidad())
	}

	test "perezoso juega y queda cansado, duerme y queda contento" {
		perezoso.jugarSolo()
		perezoso.comer()
		perezoso.dormir()
		assert.that(perezoso.estaContento())
	}
	
}